NewtonianFrame N 

RigidBody R 			%Robot
Rigidbody F 			%Front wheel
RigidBody B 			%Back wheel
RigidBody P 			%tige pendule

System S1(R,F,B, P); 		%Robot + pendule

Constant mR   			%Masse Robot
Constant mF   			%Masse Front wheel
Constant mB   			%Masse Back wheel
Constant mP   			%Masse tige pendule

Constant rayon			%rayon roue
Constant L			%Longueur tige pendule
Constant LR			%Longueur robot

Constant b			%coeficient visqueux
Constant g			%acceleration gravit.

Point Fs(F), Bs(B)		%points de contact sol/roues
Point RPO(P)

variable q'', Ffb, Fff, Nb, Nf, qWB'', x'', qWF''

Constant Torque

R.Setmass(mR)
F.Setmass(mF)
B.Setmass(mB)
P.Setmass(mP)

F.Setinertia(Fcm,0,0,0.5*mF*rayon^2)
B.Setinertia(Bcm,0,0,0.5*mB*rayon^2)
P.Setinertia(Pcm,0,0,(1/12)*mP*L^2)

R.RotateZ(N,0)
P.RotateZ(N,q)
F.RotateZ(N, qWF)
B.RotateZ(N, qWB)

%F.SetAngularVelocityAcceleration(N, qWF*nz>)
%B.SetAngularVelocityAcceleration(N, qWB*nz>)

Ro.Translate(No,x*nx>)
Rcm.Translate(Ro,0>)
Fo.Translate(Ro,0.5*LR*nx>)
Fcm.Translate(Fo,0>)
Bo.Translate(Ro,-0.5*LR*nx>)
Bcm.Translate(Bo,0>)
Po.Translate(Ro,-L*py>)
Pcm.Translate(Po,0.5*L*py>)
Fs.Translate(Fo,-rayon*ny>)
Bs.Translate(Bo,-rayon*ny>)
RPO.Translate(Ro, 0>)

Rcm.AddForce(-g*mR*ny>)
Fcm.AddForce(-g*mF*ny>)
Bcm.AddForce(-g*mB*ny>)
Pcm.AddForce(-g*mP*ny>)

Fs.Addforce(Nf*ny>-Fff*nx>)
Bs.Addforce(Nb*ny>-Ffb*nx>)

P.AddTorque(-b*w_P_N>)
R.AddTorque(b*w_P_N>)
B.AddTorque(-Torque*nz>)

Eq[1] = dot(S1.Getdynamics(),nx>)
Eq[2] = dot(S1.Getdynamics(),ny>)
Eq[3] = dot(S1.Getdynamics(Bs),nz>)

Eq[4] = dot(P.Getdynamics(Ro),nz>)
Eq[5] = dot(B.Getdynamics(Bcm),nz>)
Eq[6] = dot(F.Getdynamics(Fcm),nz>)



Eq[7] = dt(dot(Bs.GetVelocity(N), nx>))
Eq[8] = dt(dot(Fs.GetVelocity(N), nx>))

%tspan
Input tStep = 0.01, tFinal = 10 sec, absError=1.0E-10

%Conditions initiales
Input q' = 0 deg/s, q = -15 deg, qWF = 0 deg, x' = 0 m/s, x = 0 m, qWB = 0 deg, qWB' = 0 deg/s, qWF' = 0 deg/s

%Constantes
Input mR = 3 kg
Input rayon = 0.04 m 
Input mP = 0.5 kg
Input mF = 0.0018 kg
Input mB = 0.0018 kg
Input L = 0.5 m
Input g = 9.81 m/s^2
Input Torque = 2 N*m
Input LR = 0.5 m
Input b = 0.3

%Output t sec, q deg, qWB deg, x m, qWF deg, x' m/s

Ccorner1x = dot(nx>, Bo.GetPosition(No))
Ccorner1y = dot(ny>, Bo.GetPosition(No))
Ccorner2x = dot(nx>, Fo.GetPosition(No))
Ccorner2y = dot(ny>, Fo.GetPosition(No))
Ccorner3x = dot(nx>, Fo.GetPosition(No))
Ccorner3y = dot(ny>, Fo.GetPosition(No))
Ccorner4x = dot(nx>, Bo.GetPosition(No))
Ccorner4y = dot(ny>, Bo.GetPosition(No))
Ccmx = dot(nx>, Rcm.GetPosition(No))
Ccmy = dot(ny>, Rcm.GetPosition(No))
Bx = dot(nx>, Po.GetPosition(No))
By = dot(ny>, Po.GetPosition(No))
WgContactx = dot(nx>, Bs.GetPosition(No))
WgContacty = dot(ny>, Bs.GetPosition(No))
WdContactx = dot(nx>, Fs.GetPosition(No))
WdContacty = dot(ny>, Fs.GetPosition(No))
Output t sec, x m, x' m/sec, q deg, q' deg/s, qWB' deg/sec, qWF' deg/sec, Ffb N, Fff N, Nb N, Nf N
Output Ccorner1x, Ccorner1y, Ccorner2x, Ccorner2y, Ccorner3x, Ccorner3y, Ccorner4x, Ccorner4y, Ccmx, Ccmy, Bx, By, WgContactx, WgContacty, WdContactx, WdContacty

ODE(Eq,q'', Ffb, Fff, Nb, Nf, x'', qWB'', qWF'') Moteur1_Moins45deg.m

Plot ODE.1
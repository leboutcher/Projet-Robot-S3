NewtonianFrame N

RigidBody R %Robot
RigidBody P %Prehenseur
RigidBody RW %Roue Arriere
RigidBody FW %Roue Avant
%RigidBody E %Pendule

Particle B %Batterie
Particle M %Moteur
Particle S  %Sapin
%Point EP (E)


System S1(R,B,M,RW,FW)
System S2(P,S) 


Constant MasseRobot
Constant MasseBatterie
Constant MasseMoteur
Constant MassePrehenseur
Constant MasseSapin
Constant MasseRW
Constant MasseFW
Constant MassePendule
Constant LongueurPendule
Constant HauteurSapin
Constant g
Constant ho
%Constant torque
%Constant VitAngulaire

Constant distRWM %distance entre le RW et le milieu du robot
Constant distSolRail %distance entre le sol et le rail
Constant distRailM %distance entre le rail et le milieu du robot
Constant diametreRoue %diametre des roues
Constant distBatMilieu %distance entre la batterie et le milieu du robot
Constant distMotMilieu %distance entre le moteur et le milieu du robot
Constant longrobot %longueur du robot
Constant InertieRW = (0.5 * MasseRW * diametreRoue^2) %inertie de la roue arriere
Constant InertieFW = (0.5 * MasseFW * diametreRoue^2) %inertie de la roue avant
Constant InertieP = (0.5 * MassePrehenseur * diametreRoue^2) %inertie du prehenseur


Variable q'',theta'', fg, fd, Nd, Ng, tension, torque, X''

R.SetMass(MasseRobot) %Ajout de la masse du robot
P.SetMass(MassePrehenseur) %Ajout de la masse du prehenseur
B.SetMass(MasseBatterie) %Ajout de la masse de la batterie
M.SetMass(MasseMoteur) %Ajout de la masse du moteur
S.SetMass(MasseSapin) %Ajout de la masse du sapin
RW.SetMass(MasseRW) %Ajout de la masse de la roue arriere
FW.SetMass(MasseFW) %Ajout de la masse de la roue avant
%E.SetMass(MassePendule) %Ajout de la masse du pendule
RW.SetInertia(RWcm,0,0,InertieRW) %Ajout de l'inertie de la roue arriere
FW.SetInertia(FWcm,0,0,InertieFW) %Ajout de l'inertie de la roue avant
P.SetInertia(Pcm,0,0,InertieP) %Ajout de l'inertie du prehenseur sinon ca ne voualit pas compiler
%RW.SetAngularVelocityAcceleration(N,VitAngulaire*nz>) %Ajout de la vitesse angulaire de la roue arriere
%FW.SetAngularVelocityAcceleration(N,VitAngulaire*nz>) %Ajout de la vitesse angulaire de la roue avant

R.RotateZ(N,0)
R.SetAngularVelocityAcceleration(N,0>)
FW.RotateZ(N,Theta)
RW.RotateZ(N,Theta)

P.RotateZ(N,q)

Ro.Translate(No,X*nx>) 

%Eo.Translate(Rcm, 0>)

%Ecm.Translate(Eo,-LongueurPendule*ey>)

%EP.Translate (Pcm,0>)

Rcm.Translate(Ro,longrobot/2*rx>)

RWcm.Translate(Rcm,-distRWM*rx>)

Rwo.Translate(RWcm,-diametreRoue/2*ry>)

FWcm.Translate(Rcm,distRWM*rx>)

Fwo.Translate(FWcm,-diametreRoue/2*ry>)

Po.Translate(Rcm,0>) %%%%%%
Pcm.Translate(Po,-LongueurPendule/2*py>) %%%%%%

S.Translate(Po,((-HauteurSapin/2)-LongueurPendule)*py>) %%%%%

B.Translate(Rcm,distBatMilieu*rx>)

M.Translate(Rcm,-distMotMilieu*rx>)


%VT> = Rcm.Getunitvector(Pcm)

%AddForces
Rcm.AddForce(tension*py>)
Rcm.AddForce(-MasseRobot*g*ny>)
Po.AddForce(-tension*py>) %%%%
Pcm.AddForce(-MassePrehenseur*g*ny>) 
RWcm.AddForce(-MasseRW*g*ny>)
FWcm.AddForce(-MasseFW*g*ny>)
Fwo.AddForce(Ng*ny>)
Rwo.AddForce(Nd*ny>)
Rwo.AddForce(-fg*nx>)
Fwo.AddForce(-fd*nx>)
S.AddForce(-MasseSapin*g*ny>)
B.AddForce(-MasseBatterie*g*ny>)
M.AddForce(-MasseMoteur*g*ny>)
%Ecm.AddForce(-MassePendule*g*ny>)
%Eo.AddForce(-tension*VT>)
%EP.AddForce(tension*VT>)



%AddTorques
RW.AddTorque(torque*nz>)


%Ã‰quations 
eq[1] = dot(S1.Getdynamics(),nx>)
eq[2] = dot(S1.Getdynamics(),ny>)
eq[3] = dot(S1.Getdynamics(Rcm),nz>)
eq[4] = dot(S2.Getdynamics(),nx>)
eq[5] = dot(S2.Getdynamics(),ny>)
eq[6] = dot(S2.Getdynamics(Pcm),nz>)
eq[7] = dtdt((Theta*diametreRoue/2)-X)
eq[8] = dot(RW.Getdynamics(RWcm),nz>)
eq[9] = dot(FW.Getdynamics(FWcm),nz>)

%(torque-r*fg-(RW.GetInertiaDyadic(RWcm))*theta'')


%tspan
Input tStep = 0.01, tFinal = 10 sec

%Conditions initiales<
Input q = 0 rad, q'=10 rad/s, theta = 10 rad, theta'= 10 rad/s, X=10 m, X'=10 m/s 

%Constantes
Input MasseRobot = 2 kg
Input MasseBatterie = 0.5 kg
Input MasseMoteur = 0.5 kg
Input MassePrehenseur = 0.5 kg
Input MasseSapin = 0.5 kg
Input MasseRW = 0.0018 kg
Input MasseFW = 0.0018 kg
Input LongueurPendule = 0.5 m
Input HauteurSapin = 0.2 m
Input g = 9.81 m/s^2
Input ho = 0.5 m
%Input torque = 0.1 N*m
%Input VitAngulaire = 10 rad/s
Input distRWM = 0.1 m
Input distSolRail = 0.1 m
Input distRailM = 0.1 m
Input diametreRoue = 0.08 m
Input distBatMilieu = 0.1 m
Input distMotMilieu = 0.1 m
Input longrobot = 0.5 m

ODE (eq=0, q'',fg, fd, Nd, Ng, tension, torque, X'', theta'')

output(q,tension)
Plot ODE.1















   (1) NewtonianFrame N
   (2) RigidBody P % Préhenseur
   (3) RigidBody R % Robot 
   (4) RigidBody rF % roue et axe
   (5) RigidBody rB % roue et axe
   (6) Particle Prehenseur % Préhenseur
   (7) Particle Moteur % Moteur
   (8) Particle batt % Batterie
   (9) Particle sapin % Sapin
   (10) Point mo (N) 
   (11) Point FW (R)
   (12) Point BW (R)
   (13) Point CRF (rF) % point de contacte entre la roue1 et le rail
   (14) Point CRB (rB) % point de contacte entre la roue2 et le rail
   (15) % system
   (16) System Robus (Moteur, batt, R)
   (17) %System bras (Prehenseur, P)
   (18) System sapin (Prehenseur, P, sapin)
   (19) %constant
   (20) Constant Mrobot %masse du robot
   (21) Constant Mmoteur %masse du moteur
   (22) Constant Mbatt %masse de la batterie
   (23) Constant MPrehenseur %masse du préhensuer
   (24) Constant Mpendule %masse du pendule
   (25) Constant Msapin %Masse du sapin
   (26) Constant L %dist cdm et préhensuer
   (27) Constant h0 % hauteur obstacle
   (28) Constant hr % hauteur rail par rapport au sol
   (29) constant r % rayon de la roue 
   (30) Constant hRobot % hauteur robot par raport au rail
   (31) %Constant m % masse sapin
   (32) constant g = 9.81 m/s^2
   (33) constant distmO % distance de la masse a l'ocbstacle
   (34) constant distOB % distance de l'obstacle au bac
   (35) constant distRcm_Moteur %distance du centre de masse de R du moteur
   (36) constant distRcm_batt %distance du centre de masse de R de la batt
   (37) constant distRcm_BW %distance du centre de masse de R de la rout arrière
   (38) constant distRcm_FW %distance du centre de masse de R de la rout avant
   (39) Constant Torque
   (40) hrobot_sol = hr + hRobot %hauteur robot par rapport au sol
-> (41) hrobot_sol = hr + hRobot

   (42) % variable
   (43) Variable q'', X''
   (44) Variable Frx_p, Fry_p, Frx_rF, Fry_rF, Frx_rB, Fry_rB, fg, fd
   (45) Variable hp % hauteur préhensuer
   (46) Variable hps % hauteur préhensuer + sapin
   (47) % matrix de rotation
   (48) R.RotateZ(N,0)
-> (49) R_N = [1, 0, 0;  0, 1, 0;  0, 0, 1]
-> (50) w_R_N> = 0>
-> (51) alf_R_N> = 0>

   (52) P.RotateZ(R,q)
-> (53) P_R = [cos(q), sin(q), 0;  -sin(q), cos(q), 0;  0, 0, 1]
-> (54) w_P_R> = q'*Pz>
-> (55) w_P_N> = q'*Pz>
-> (56) alf_P_R> = q''*Pz>
-> (57) alf_P_N> = q''*Pz>

   (58) % set Mass
   (59) R.SetMass(Mrobot)
   (60) Moteur.SetMass(Mmoteur*2)
   (61) Prehenseur.SetMass(Mprehenseur)
   (62) P.SetMass(Mpendule)
   (63) batt.SetMass(Mbatt)
   (64) sapin.SetMass(Msapin)
   (65) %Translate
   (66) mo.Translate(No,0>)
-> (67) p_No_mo> = 0>
-> (68) v_mo_N> = 0>
-> (69) a_mo_N> = 0>

   (70) %robot
   (71) Rcm.Translate(mo, hrobot_sol*ny> + X*nx>)
-> (72) p_mo_Rcm> = X*Nx> + hrobot_sol*Ny>
-> (73) v_Rcm_N> = X'*Nx>
-> (74) a_Rcm_N> = X''*Nx>

   (75) Ro.Translate(Rcm, 0>)
-> (76) p_Rcm_Ro> = 0>
-> (77) v_Ro_N> = X'*Nx>
-> (78) a_Ro_N> = X''*Nx>

   (79) Moteur.Translate(Rcm, distRcm_Moteur*nx>)
-> (80) p_Rcm_Moteur> = distRcm_Moteur*Nx>
-> (81) v_Moteur_N> = X'*Nx>
-> (82) a_Moteur_N> = X''*Nx>

   (83) batt.Translate(Rcm, distRcm_batt*nx>)
-> (84) p_Rcm_batt> = distRcm_batt*Nx>
-> (85) v_batt_N> = X'*Nx>
-> (86) a_batt_N> = X''*Nx>

   (87) BW.Translate(Rcm, -distRcm_BW*Rx>)
-> (88) p_Rcm_BW> = -distRcm_BW*Rx>
-> (89) v_BW_N> = X'*Nx>
-> (90) a_BW_N> = X''*Nx>

   (91) FW.Translate(Rcm, distRcm_FW*Rx>)
-> (92) p_Rcm_FW> = distRcm_FW*Rx>
-> (93) v_FW_N> = X'*Nx>
-> (94) a_FW_N> = X''*Nx>

   (95) % pendule et préensaeur 
   (96) Po.Translate(Ro, 0>)
-> (97) p_Ro_Po> = 0>
-> (98) v_Po_N> = X'*Nx>
-> (99) a_Po_N> = X''*Nx>

   (100) Pcm.Translate(Po, (L/2)*py>)
-> (101) p_Po_Pcm> = 0.5*L*Py>
-> (102) v_Pcm_N> = X'*Nx> - 0.5*L*q'*Px>
-> (103) a_Pcm_N> = X''*Nx> - 0.5*L*q''*Px> - 0.5*L*q'^2*Py>

   (104) Prehenseur.Translate(Po, L*py>)
-> (105) p_Po_Prehenseur> = L*Py>
-> (106) v_Prehenseur_N> = X'*Nx> - L*q'*Px>
-> (107) a_Prehenseur_N> = X''*Nx> - L*q''*Px> - L*q'^2*Py>

   (108) %position de roue 
   (109) rFcm.Translate(FW, 0>)
-> (110) p_FW_rFcm> = 0>
-> (111) v_rFcm_N> = X'*Nx>
-> (112) a_rFcm_N> = X''*Nx>

   (113) rBcm.Translate(BW, 0>)
-> (114) p_BW_rBcm> = 0>
-> (115) v_rBcm_N> = X'*Nx>
-> (116) a_rBcm_N> = X''*Nx>

   (117) % point de contacte roue rail
   (118) CRF.Translate(rFcm, r*ny>)
-> (119) p_rFcm_CRF> = r*Ny>

   (120) help
